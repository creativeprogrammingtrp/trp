<h3 style="font-weight: normal; width:300px; float:left;">Review Materials </h3><div class="saveprinticon" style="background: none; float:right;"> <a href="javascript:void(0);"  id="simplePrint"><img alt="" src="../backend/img/print_icon.png"> </a> &nbsp; &nbsp; <a href="javascript:void(0);"><img alt="" src="../backend/img/save_icon.png"></a></div>
<div style="clear:both;"></div>
<div class="row grid-boxes" >
    <div class="col-md-12" id="pdf1" style="background: none;">
    
    <div style="max-height: 360px; overflow: scroll; background: none;" id="printArea"> 
    
    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>
<p></p>
    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>

    <p>The set of APIs (application programming interfaces) is designed to allow client applications to process real-time account creation, account loading, reverse load, cancel load, and account management functions. All data exchanged between the client system and the payment application will be in an XML block in a regular HTTPS POST method. This document will cover:

Sending the XML request message via HTTPS POST method
Information required (and optional parameters) to use the API
Sample XML responses.</p>

<p>The API Gateway is the entry point for all APIs. The gateway handles user authentication and authorization for the APIs. In order to submit a message through the gateway, a valid API user with the correct permissions is required. Please contact hyperWALLET Systems Inc. to be setup with an API user account.</p>
<p>For increased security, the API gateway enforces the use of SSL (HTTPS / Port 448) only, and only accepts POSTs (GETs will be ignored). Production site APIs will be using trusted certificates and should be automatically accepted by most client systems. In the event of a trusted certificate not being trusted (SSL Exception) please download the certificate from the website, and follow the steps outlined in section 2.3.</p>
<p>Note: Demo sites are also enforcing SSL-only connections, but will be using self-signed certificates which are not automatically trusted. In order to use the self-signed certificates for demo, follow the same steps outlined in section 2.3 for your environment. If you wish to purchase a signed certificate for your demo site, please contact hyperWALLET.</p>


</div>

    <div style="background: none;"><button class="btn btn-lg btn-info" id="go_back" type="button" style="font-size:30px" onclick="top.location='index.php/admin/training'">GO BACK</button> &nbsp; <button style="font-size:30px" class="btn btn-lg btn-success" id="take_exam" type="button">TAKE EXAM</button></div>
    
    </div>
</div>

 
    
    <!-- Test Question modal -->
<div id="modal_test_question" class="modal slide">
    <div class="modal-dialog resize_modal">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Test Question</h4>
            </div>
            <form style="margin-top:0px" id="basic-wizard" action="index.php/admin/training" method="post" class="form-horizontal form-box">
            <div class="modal-body">
            	
    				<div class="form-box-content">
    					<div id="first" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">1 of 5</div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 1?</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class="ui-wizard-content">Is this interesting?</span>
				                       <input type="hidden" name="Ques1" id="Ques1" value="Is this interesting?">
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="radio">
				                        <label for="example-radio1">
				                            <input type="radio" value="Yes" name="example-radios" id="ques1-radio1" onclick="setAns('ques1-radio1','Ques1Ans');"> Yes
				                        </label>
				                    </div>
				                    <div class="radio">
				                        <label for="example-radio2">
				                            <input type="radio" value="No" name="example-radios" id="ques1-radio2" onclick="setAns('ques1-radio2','Ques1Ans');"> No
				                        </label>
				                    </div>  
				                    <input type="hidden" name="Ques1Ans" id="Ques1Ans" value="">
				                    <input type="hidden" name="AdminQues1Ans" id="AdminQues1Ans" value="No">
				                </div>
				            </div>
				            <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="next" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					
    					<div id="2" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">2 of 5</div>
				            </div>
				            
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 2?</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class="ui-wizard-content">Is this interesting?</span>
				                       <input type="hidden" name="Ques2" id="Ques2" value="Is this interesting?">
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="radio">
				                        <label for="example-radio1">
				                            <input type="radio" value="Yes" name="example-radios" id="ques2-radio1" onclick="setAns('ques2-radio1','Ques2Ans');"> Yes
				                        </label>
				                    </div>
				                    <div class="radio">
				                        <label for="example-radio2">
				                            <input type="radio" value="No" name="example-radios" id="ques2-radio2" onclick="setAns('ques2-radio2','Ques2Ans');"> No
				                        </label>
				                    </div>  
				                    <input type="hidden" name="Ques2Ans" id="Ques2Ans" value="">
				                    <input type="hidden" name="AdminQues2Ans" id="AdminQues2Ans" value="Yes">
				                </div>
				            </div>
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="next" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					
    					<div id="3" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">3 of 5</div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 3?</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class="ui-wizard-content">Is this interesting?</span>
				                       <input type="hidden" name="Ques3" id="Ques3" value="Is this interesting?">
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="radio">
				                        <label for="example-radio1">
				                            <input type="radio" value="Yes" name="example-radios" id="ques3-radio1" onclick="setAns('ques3-radio1','Ques3Ans');"> Yes
				                        </label>
				                    </div>
				                    <div class="radio">
				                        <label for="example-radio2">
				                            <input type="radio" value="No" name="example-radios" id="ques3-radio2" onclick="setAns('ques3-radio2','Ques3Ans');"> No
				                        </label>
				                    </div>  
				                    <input type="hidden" name="Ques3Ans" id="Ques3Ans" value="">
				                    <input type="hidden" name="AdminQues3Ans" id="AdminQues3Ans" value="No">
				                </div>
				            </div>
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="next" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					<div id="4" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">4 of 5</div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 4?</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class="ui-wizard-content">Is this interesting?</span>
				                       <input type="hidden" name="Ques4" id="Ques4" value="Is this interesting?">
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="radio">
				                        <label for="example-radio1">
				                            <input type="radio" value="Yes" name="example-radios" id="ques4-radio1" onclick="setAns('ques4-radio1','Ques4Ans');"> Yes
				                        </label>
				                    </div>
				                    <div class="radio">
				                        <label for="example-radio2">
				                            <input type="radio" value="No" name="example-radios" id="ques4-radio2" onclick="setAns('ques4-radio2','Ques4Ans');"> No
				                        </label>
				                    </div>  
				                    <input type="hidden" name="Ques4Ans" id="Ques4Ans" value="">
				                    <input type="hidden" name="AdminQues4Ans" id="AdminQues4Ans" value="Yes">
				                </div>
				            </div>
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="next" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					<div id="5" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">5 of 5</div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 5?</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class="ui-wizard-content">Is this interesting?</span>
				                       <input type="hidden" name="Ques5" id="Ques5" value="Is this interesting?">
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="radio">
				                        <label for="example-radio1">
				                            <input type="radio" value="Yes" name="example-radios" id="ques5-radio1" onclick="setAns('ques5-radio1','Ques5Ans');"> Yes
				                        </label>
				                    </div>
				                    <div class="radio">
				                        <label for="example-radio2">
				                            <input type="radio" value="No" name="example-radios" id="ques5-radio2" onclick="setAns('ques5-radio2','Ques5Ans');"> No
				                        </label>
				                    </div>  
				                    <input type="hidden" name="Ques5Ans" id="Ques5Ans" value="">
				                    <input type="hidden" name="AdminQues5Ans" id="AdminQues5Ans" value="Yes">
				                </div>
				            </div>
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="nextExam1" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					<div id="6" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-4 text-left active left_padding">Review of your Exam</div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 1.</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewQues1">Is this interesting?</span>
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewAns1">Yes</span>
				                    </div>
				                </div>
				            </div>
				            
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 2.</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewQues2">Is this interesting?</span>
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewAns2">Yes</span>
				                    </div>
				                </div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 3.</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                      
				                       <span class=" ui-wizard-content" id="reviewQues3">Is this interesting?</span>
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewAns3">Yes</span>
				                    </div>
				                </div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 4.</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                      
				                       <span class=" ui-wizard-content" id="reviewQues4">Is this interesting?</span>
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewAns4"></span>
				                    </div>
				                </div>
				            </div>
				            
				            <div class="form-group">
				                <label class="control-label col-md-2" for="example-username">Question 5.</label>
				                <div class="col-md-3">
				                    <div class="input-group">
				                      
				                       <span class=" ui-wizard-content" id="reviewQues5">Is this interesting?</span>
				                    </div>
				                </div>
				            </div>
				            <div class="form-group"> 
				                <label class="control-label col-md-2" for="example-username"></label>
				                <div class="col-md-4">
				                    <div class="input-group">
				                       <span class=" ui-wizard-content" id="reviewAns5"></span>
				                    </div>
				                </div>
				            </div>
				            
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                <input type="reset" class="btn btn-danger" id="back" value="Back">
					                <input type="submit" class="btn btn-primary" id="confirm" value="Next">
					            </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    				
    				
    				<div id="7" class="step">
    						<div class="wizard-steps row">
				                <div class="col-md-10 text-left active left_padding resultMessageClass"><h4 class="resultMessage">result message</h4></div>
				            </div>
				            <input type="hidden" name="rightAnsCountdata" id="rightAnsCountdata" value="">
				            <h3>You Answered <span class="badge badge-success" id="rightAnsCount"></span> out of <span class="badge" id="">5</span> question correctly</h3>
				            <h4 >Your score is <span class="resultPercent"></span></h4>
				            <div class="progress ">
                                <div id="resultPercentdiv"  class="progress-bar progress-bar-success resultPercent"></div>
                                <input type="hidden" name="resultPercentData" id="resultPercentData" value="">
                            </div>
				             <!-- Form Buttons -->
					        <div class="form-group form-actions">
					            <div class="col-md-10 col-md-offset-2">
					                
					                <input type="submit" class="btn btn-primary" id="next" value="Next">
					                <button  class="btn btn-success" id="re_take_exam" type="button">Retake Exam</button></div>
					              </div>
					        </div>
					        <!-- END Form Buttons -->
    					</div>
    					
    					
                    </div>
            	</form>
            </div>
        </div>
    </div>


<!--  End Test Question modal -->      
          
<script type="text/javascript"> 


function printElem(options){
	//alert('sdd');
	$('#printArea').printElement(options);
}


function calcualteExamResult(){
	$("#nextExam1").click(function() {
		
		var countRightAns = 0;
		var totalQues = 5;
		
		 var Ques1 = $("#Ques1").val();
		 var Ques1Ans = $("#Ques1Ans").val();
		 var AdminQues1Ans = $("#AdminQues1Ans").val();
		 
		 countRightAns = (Ques1Ans == AdminQues1Ans) ? countRightAns+1 : countRightAns;  
			  
		 $("#reviewQues1").html(Ques1);
		 $("#reviewAns1").html(Ques1Ans);
	     
		 var Ques2 = $("#Ques2").val();
		 var Ques2Ans = $("#Ques2Ans").val();
		 var AdminQues2Ans = $("#AdminQues2Ans").val();
		 countRightAns = (Ques2Ans == AdminQues2Ans) ? countRightAns+1 : countRightAns;
		 $("#reviewQues2").html(Ques2);
		 $("#reviewAns2").html(Ques2Ans);
	     
		 var Ques3 = $("#Ques3").val();
		 var Ques3Ans = $("#Ques3Ans").val();
		 var AdminQues3Ans = $("#AdminQues3Ans").val();
		 countRightAns = (Ques3Ans == AdminQues3Ans) ? countRightAns+1 : countRightAns;
		 $("#reviewQues3").html(Ques3);
		 $("#reviewAns3").html(Ques3Ans);
	     
		 var Ques4 = $("#Ques4").val();
		 var Ques4Ans = $("#Ques4Ans").val();
		 var AdminQues4Ans = $("#AdminQues4Ans").val();
		 countRightAns = (Ques4Ans == AdminQues4Ans) ? countRightAns+1 : countRightAns;
		 
		 $("#reviewQues4").html(Ques4);
		 $("#reviewAns4").html(Ques4Ans);
	     
		 var Ques5 = $("#Ques5").val();
		 var Ques5Ans = $("#Ques5Ans").val();
		 var AdminQues5Ans = $("#AdminQues5Ans").val();
		 countRightAns = (Ques5Ans == AdminQues5Ans) ? countRightAns+1 : countRightAns;
		 
		 $("#reviewQues5").html(Ques5);
		 $("#reviewAns5").html(Ques5Ans);
	     
		 var resultpar = (countRightAns*100)/totalQues;
		 
		 
	     
	     $("#rightAnsCountdata").val(countRightAns);
	     $("#rightAnsCount").html(countRightAns);
	     
	     $(".resultPercent").html(resultpar+"%");
	     $("#resultPercentdiv").css('width',resultpar+'%');
	     
	     $("#resultPercentData").val(resultpar);
	     
	     
	     var resultMessageText = '';
	     
	     if(resultpar != 100) { resultMessageText = 'Sorry! you have failed this exam' }else{ resultMessageText =  'Congratulations! you have passed the exam'; $("#resultMessageClass").removeClass('active'); $("#re_take_exam").css('display','none');}
	     
	     $(".resultMessage").html(resultMessageText);
	     
	     
	     
	     //resultPercentdiv
	     
	     
	});
}



function clickSaveExamData() {
	$("#confirm").click(function() {
		$.post("index.php/admin/training/saveTrainingExamData", {
			senddata : 'yes',
            uid:dataClient.uid,
            
            Ques1 : $("#Ques1").val(),
            Ques1Ans : $("#Ques1Ans").val(),
            
            Ques2 : $("#Ques2").val(),
            Ques2Ans : $("#Ques2Ans").val(),
            
            Ques3 : $("#Ques3").val(),
            Ques3Ans : $("#Ques3Ans").val(),
            
            Ques4 : $("#Ques4").val(),
            Ques4Ans : $("#Ques4Ans").val(),
            
            Ques5 : $("#Ques5").val(),
            Ques5Ans : $("#Ques5Ans").val(),
            
            resultPercentData : $("#resultPercentData").val(),
            rightAnsCountdata : $("#rightAnsCountdata").val(),
            
                 
		}, function(data) {
			if (typeof (data) == 'object') {
				dataClient = data;
				if($("#next").val()=='Submit' ){
                                $('.fade').modal('show');
                                $("#one").trigger('click');
                                $("#setupcompanybutton").attr('disabled','disabled');
                                $("#setupcompanyli").css('disabled','disabled');
                                $("#setupcompanyli").attr('class','overlay');
                                $("#badge_setup_company").css('display','block');
                                
					}
			}
			loadClients();
		}, "json");

		return false;
	});
}

function setAns(data, elem){
	//alert($('#'+data).val());
	var getvalue = $('#'+data).val();
	$('#'+elem).val(getvalue);
//	alert($('#'+elem).val());
}
	
	
$(function(){
	//loadObject();
	//same_check();
	var compiliance_test1 = '{compiliance_test5}';
	if(compiliance_test1 === '1'){
  	  $("#take_exam").css('display','none');
	}
	clickSaveExamData();
	calcualteExamResult();
      //  uploadGallery();
        $('#basic-wizard').formwizard({
            focusFirstInput: true,
            disableUIStyles: true,
            back : ":reset",
    		next : ":submit",
    		textSubmit : 'Close',
    		textNext : 'Next',
    		textBack : 'Back',
    		resetForm: true
        });
        /*
        $("#basic-wizard").bind("step_shown", function(event, data){
    		alert(data.isBackNavigation);
    	});
        */
        $(".nav-dash").css('display','none');
        
        
        $("#take_exam").click(function(){
    		$("#modal_test_question").modal('show');	
    	});
        
    	$("#re_take_exam").click(function(){
    		$("#modal_test_question").modal('hide');
    		//$("#modal_test_question").modal('show');
    	});
    	
    	$("#simplePrint").click(function() {
    		printElem({});
    		}); 
    	//printElement();

    	
    	//$('#toppart').remove();


    		
});


</script>